---
alwaysApply: true
---

# Implementation Plan

## Step 1: プロジェクト初期化（backend, frontend, ルール作成）
- 状態: Done
- メモ: backend/frontend/cursor-rules を作成。依存ファイルと雛形を配置。

## Step 2: FastAPI 起動と DB 接続
- 状態: Done
- メモ: /health 200 を確認。SQLite 接続とテーブル作成（create_all）を起動時に実施。

## Step 3: Contacts CRUD API 実装
- 状態: Done
- メモ: contacts の POST/GET/PUT/DELETE 実装と動作確認。email にユニーク制約を適用。

## Step 4: フロント初期化と一覧表示
- 状態: Done
- メモ: App で `ContactsPage` を表示。API クライアントで `/api/contacts` を取得し一覧描画。

Done
フロントを Vite+React+TS で起動し、`ContactsPage` を `App.tsx` へ組み込み。`ContactsAPI.list()` で `/api/contacts` を取得し、読み込み状態と共に一覧表示を実装。

## Step 5: 追加/編集/削除 UI
- 状態: Done
- メモ: フォームとAPI連携、基本バリデーションを実装。追加フォーム、編集モード（フォームに初期値を設定）、削除の確認ダイアログを追加し、API の create/update/delete と連携済み。

## Step 6: テスト・エラーハンドリング整備
- 状態: Done
 - メモ:
	 - バックエンド:
		 - テスト環境を整備（`backend/requirements-test.txt` に pytest, pytest-asyncio, httpx, pytest-cov を追加）
		 - `backend/tests/test_contacts.py` にユニットテストを実装（in-memory SQLite を用いたテスト DB、FastAPI の dependency override を利用）
		 - カスタム例外を `backend/app/exceptions.py` に実装し、エラーハンドリングを明確化
		 - テスト結果: 2 passed
	 - フロントエンド:
		 - Vitest と React Testing Library を導入しテスト環境を構築（`frontend/tests/setup.ts`、`vite.config.ts` を設定）
		 - `frontend/tests/ContactForm.test.tsx` を実装・調整し、`ContactForm` のバリデーションと送信ロジックを検証
		 - UI 改善: `frontend/src/components/Toast.tsx`（トースト通知）を追加、`ContactForm` のエラーハンドリングを改善
		 - テスト結果: 5 passed（全テストパス）
	 - 備考:
		 - Pydantic v2 の deprecation 警告が出ています（将来的に ConfigDict への移行が必要）
		 - 次の推奨タスク: CI（GitHub Actions）で `pytest` と `vitest` を自動実行するワークフローを追加

## Step 7: フロントの UI デザイン調整（TypeScript + CSS）
- 状態: Done
- メモ:
	- 目的: フロントエンドの見やすさを向上させるため、中央化したスタイルを導入し既存コンポーネントのマークアップをクラスベースへ置換
	- 変更点（主なファイル）:
		- `frontend/src/styles.css` を追加（フォーム、ボタン、カード、トースト等の共通スタイル）
		- `frontend/src/components/ContactForm.tsx` のインラインスタイルをクラスに置換し、レスポンシブな行レイアウトへ変更
		- `frontend/src/pages/Contacts.tsx` をカードレイアウトに変更し、グリッドでの表示を導入
		- `frontend/src/components/Toast.tsx` のスタイルをプロジェクトCSSへ移行（ポータル挙動は維持）
		- `frontend/src/App.tsx` で `styles.css` をインポートしレイアウトクラスを適用
	- 動作・確認方法:
		1. `cd frontend && npm install`（必要に応じて）
		2. `npm run dev` で Vite 開発サーバを起動
		3. ブラウザで開き、Contacts ページのフォーム表示・カード表示・編集/削除・トースト表示を確認
	- 備考:
		- 既存の API ロジックやバリデーションは変更していないため、機能は既存通り動作するはずです。
		- トーストや色は Tailwind を前提としない純粋な CSS を用意しました。もしプロジェクトで Tailwind を使用している場合は調整が必要です。
	- 次の推奨タスク:
		- カラーパレットの別案（3案）を作り :root 変数で切り替えられるようにする
		- フロントのビルド確認（`npm run build`）と CI ワークフローへの組み込み
		- UI ストーリーブック導入や visual regression テストの検討
