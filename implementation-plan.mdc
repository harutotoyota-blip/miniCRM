---
alwaysApply: true
---

# Implementation Plan

## Step 1: プロジェクト初期化（backend, frontend, ルール作成）
- 状態: Done
- メモ: backend/frontend/cursor-rules を作成。依存ファイルと雛形を配置。

## Step 2: FastAPI 起動と DB 接続
- 状態: Done
- メモ: /health 200 を確認。SQLite 接続とテーブル作成（create_all）を起動時に実施。

## Step 3: Contacts CRUD API 実装
- 状態: Done
- メモ: contacts の POST/GET/PUT/DELETE 実装と動作確認。email にユニーク制約を適用。

## Step 4: フロント初期化と一覧表示
- 状態: Done
- メモ: App で `ContactsPage` を表示。API クライアントで `/api/contacts` を取得し一覧描画。

Done
フロントを Vite+React+TS で起動し、`ContactsPage` を `App.tsx` へ組み込み。`ContactsAPI.list()` で `/api/contacts` を取得し、読み込み状態と共に一覧表示を実装。

## Step 5: 追加/編集/削除 UI
- 状態: Done
- メモ: フォームとAPI連携、基本バリデーションを実装。追加フォーム、編集モード（フォームに初期値を設定）、削除の確認ダイアログを追加し、API の create/update/delete と連携済み。

## Step 6: テスト・エラーハンドリング整備
- 状態: Pending
- メモ: ユニット/結合テスト、エラー時のUI